import { SearchQuery } from './search-query.js';
import type { PlainSearchQuery, SerializableSearchQuery } from './search-query.js';
import { v4 as uuidv4 } from 'uuid';
import type { SortOrder } from './sort-order-type.js';

/**
 * Creates a single mock SearchQuery instance.
 * Allows overriding properties with the provided partial data.
 * The ID can also be overridden. If not, a new UUID is generated by default for the mock.
 * @param override - Partial data (including optional id) to override default mock values.
 * @returns A mock SearchQuery instance.
 */
export function mockSearchQuery(override?: Partial<SerializableSearchQuery>): SearchQuery {
  const defaultId = uuidv4();

  const defaults: SerializableSearchQuery = {
    id: defaultId,
    keywords: 'mock keywords',
    contentTypeFilters: ['product', 'article'] as readonly string[],
    sortBy: 'relevance',
    sortOrder: 'desc' as SortOrder,
    page: 1,
    pageSize: 10,
  };

  const mergedId = override?.id ?? defaults.id;
  const mergedKeywords = override?.keywords ?? defaults.keywords;
  
  // If contentTypeFilters is explicitly provided in override (even as empty array), use it. Otherwise, use default.
  const mergedContentTypeFilters = override?.contentTypeFilters !== undefined
    ? [...override.contentTypeFilters]
    : [...defaults.contentTypeFilters];
  
  const mergedSortBy = override?.sortBy ?? defaults.sortBy;
  const mergedSortOrder = override?.sortOrder ?? defaults.sortOrder;
  const mergedPage = override?.page ?? defaults.page;
  const mergedPageSize = override?.pageSize ?? defaults.pageSize;
  
  return new SearchQuery(
    mergedKeywords,
    mergedContentTypeFilters,
    mergedSortBy,
    mergedSortOrder,
    mergedPage,
    mergedPageSize,
    mergedId // Pass the final ID to the constructor
  );
}

/**
 * Creates an array of mock SearchQuery instances.
 * Each mock will have a unique, deterministic ID for predictability in tests.
 * @param count - The number of mock queries to create. Defaults to 2.
 * @returns An array of mock SearchQuery instances.
 */
export function mockSearchQueries(count: number = 2): SearchQuery[] {
  const queries: SearchQuery[] = [];
  for (let i = 0; i < count; i++) {
    queries.push(mockSearchQuery({
      id: `mock-search-query-${i + 1}`, // Deterministic ID for list mocks
      keywords: `test query ${i + 1}`,
      contentTypeFilters: i % 2 === 0 ? ['product'] : ['article', 'review'],
      page: i + 1,
    }));
  }
  return queries;
}