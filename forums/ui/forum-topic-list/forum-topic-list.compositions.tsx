import React from 'react';
import { MockProvider } from '@infinity/product-hunt-platform.testing.mock-provider';
import { ForumTopicList } from './forum-topic-list.js';
import { type ForumTopic, mockForumTopics as generateMockTopics, type PlainForumTopic } from '@infinity/forums.entities.forum-topic';
import { type UserProfile, createMockUserProfile } from '@infinity/people.entities.user-profile';

// Mock user data - these are for conceptual alignment with userIds in topics.
// The ForumTopicItem internally uses useGetUserProfile. The MockProvider's Apollo setup
// would ideally serve these profiles if queried by their userIds.
// If not, ForumTopicItem has fallbacks for author name and avatar.

const mockUserProfilesList: UserProfile[] = [
  createMockUserProfile({
    userId: 'user-alice-01',
    name: 'Alice Wonderland',
    imageUrl: 'https://cdn.jsdelivr.net/gh/alohe/avatars/png/vibrent_10.png',
    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days ago
    bio: 'Tech enthusiast exploring the digital rabbit hole.',
  }),
  createMockUserProfile({
    userId: 'user-bob-02',
    name: 'Bob The Builder',
    imageUrl: 'https://cdn.jsdelivr.net/gh/alohe/avatars/png/vibrent_11.png',
    createdAt: new Date(Date.now() - 60 * 24 * 60 * 60 * 1000).toISOString(), // 60 days ago
    bio: 'Crafting innovative solutions and building digital marvels.',
  }),
  createMockUserProfile({
    userId: 'user-charlie-03',
    name: 'Charlie Innovator',
    // No imageUrl, Avatar component should display initials "CI"
    createdAt: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000).toISOString(), // 90 days ago
    bio: 'Passionate about product strategy and user experience.',
  }),
];

// Helper to create a list of ForumTopic instances with specific overrides
const createCustomTopics = (count: number, forumId: string, users: UserProfile[]): ForumTopic[] => {
  const overrides: Partial<PlainForumTopic>[] = Array.from({ length: count }, (_, i) => {
    const user = users[i % users.length];
    const daysAgo = Math.floor(Math.random() * 30) + i; // Ensure some variance and recency
    const creationDate = new Date(Date.now() - daysAgo * 24 * 60 * 60 * 1000);
    
    return {
      // id will be generated by mockForumTopics if not provided, or we can set it
      id: `topic-${forumId}-${i + 1}-${Math.random().toString(36).substring(2, 7)}`,
      forumId,
      title: `Topic #${i + 1}: Discussing Future Trends in ${forumId.replace('-', ' ')}`,
      // content: mockForumTopics typically provides default content, we can override if needed
      userId: user.userId,
      createdAt: creationDate.toISOString(),
      updatedAt: new Date(creationDate.getTime() + Math.random() * 5 * 24 * 60 * 60 * 1000).toISOString(), // updated after creation
    };
  });

  // generateMockTopics merges these overrides with its defaults
  return generateMockTopics(overrides);
};

export const BasicForumTopicList = () => {
  const topics = createCustomTopics(3, 'general-discussion', mockUserProfilesList);
  return (
    <MockProvider>
      <div style={{ padding: 'var(--spacing-large)', backgroundColor: 'var(--colors-surface-background)' }}>
        <ForumTopicList forumId="general-discussion" mockTopics={topics} />
      </div>
    </MockProvider>
  );
};

export const ForumTopicListWithManyTopics = () => {
  const topics = createCustomTopics(15, 'product-feedback', mockUserProfilesList);
  return (
    <MockProvider>
      <div style={{ 
        padding: 'var(--spacing-large)', 
        backgroundColor: 'var(--colors-surface-background)', 
        maxHeight: '400px', // Example height for scroll
        overflowY: 'auto',
        border: '1px solid var(--colors-border-default)',
        borderRadius: 'var(--borders-radius-large)'
      }}>
        <h2 style={{
            fontFamily: 'var(--typography-font-family)', 
            color: 'var(--colors-text-primary)', 
            fontSize: 'var(--typography-sizes-heading-h3)',
            marginBottom: 'var(--spacing-medium)'
        }}>
            Product Feedback Forum (15 Topics)
        </h2>
        <ForumTopicList forumId="product-feedback" mockTopics={topics} limit={15} />
      </div>
    </MockProvider>
  );
};

export const EmptyForumTopicList = () => {
  return (
    <MockProvider>
      <div style={{ padding: 'var(--spacing-large)', backgroundColor: 'var(--colors-surface-background)' }}>
        <h2 style={{
            fontFamily: 'var(--typography-font-family)', 
            color: 'var(--colors-text-primary)', 
            fontSize: 'var(--typography-sizes-heading-h3)',
            marginBottom: 'var(--spacing-medium)'
        }}>
            Announcements (No Topics Yet)
        </h2>
        <ForumTopicList forumId="announcements" mockTopics={[]} />
      </div>
    </MockProvider>
  );
};

export const ForumTopicListWithCustomStyling = () => {
  const topics = createCustomTopics(2, 'custom-style-forum', mockUserProfilesList.slice(0,1));
  return (
    <MockProvider>
      <div style={{ padding: 'var(--spacing-large)', backgroundColor: 'var(--colors-surface-primary)' }}>
        <ForumTopicList 
          forumId="custom-style-forum" 
          mockTopics={topics}
          className="custom-forum-list-class" // This class would be defined elsewhere
          style={{ 
            border: '2px dashed var(--colors-primary-default)', 
            padding: 'var(--spacing-medium)',
            borderRadius: 'var(--borders-radius-xlarge)' 
          }} 
        />
      </div>
    </MockProvider>
  );
};