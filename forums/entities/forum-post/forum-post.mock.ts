import { ForumPost } from './forum-post.js';
import type { PlainForumPost } from './plain-forum-post-type.js';
import { mockUser } from '@infinity/product-hunt-platform.entities.user';
import { v4 as uuidv4 } from 'uuid';

// Mock users to assign as authors
const user1 = mockUser({ username: 'PostCreatorExtraordinaire' });
const user2 = mockUser({ username: 'ForumCommenterPro' });

// Mock topic IDs for context
const topicIdForPosts1 = uuidv4();
const topicIdForPosts2 = uuidv4();

/**
 * Provides an array of predefined mock ForumPost instances for development and testing.
 * @returns An array containing diverse mock ForumPost objects.
 */
export function mockForumPosts(): ForumPost[] {
  return [
    ForumPost.from({
      // id, createdAt, updatedAt will be generated by .from() if not specified
      topicId: topicIdForPosts1,
      content: 'This is the first insightful post on this very important topic. Many agree.',
      userId: user1.id,
      createdAt: new Date(Date.now() - 1000 * 60 * 120).toISOString(), // 2 hours ago
      updatedAt: new Date(Date.now() - 1000 * 60 * 60).toISOString(), // 1 hour ago
    }),
    ForumPost.from({
      topicId: topicIdForPosts1,
      content: 'A follow-up reply to the first post. I wholeheartedly agree and would like to add...',
      userId: user2.id,
      createdAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
      updatedAt: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago
    }),
    ForumPost.from({
      topicId: topicIdForPosts2,
      content: 'Starting a new discussion in a different topic. This one is about best practices for mocking data.',
      userId: user1.id,
      // Letting .from() generate id, createdAt, updatedAt for this one
    }),
  ];
}

/**
 * Creates a single mock ForumPost instance with default data, allowing for partial overrides.
 * This is useful for testing and development scenarios where a ForumPost object is needed.
 * @param overrides Optional. An object containing properties to override in the default mock ForumPost.
 *                  All properties of PlainForumPost can be overridden.
 *                  If 'id', 'createdAt', or 'updatedAt' are not provided, they will be generated by ForumPost.from().
 * @returns A mock ForumPost instance.
 */
export function mockForumPost(overrides: Partial<PlainForumPost> = {}): ForumPost {
    const defaultUser = mockUser({username: 'DefaultPostAuthor'});
    const defaultTopicId = uuidv4();

    // Base data required by ForumPost.from if not overridden
    const basePostData = {
        topicId: defaultTopicId,
        content: 'This is a default mock forum post. It serves as a placeholder for more specific content.',
        userId: defaultUser.id,
    };

    // Combine base data with any overrides provided
    const postData = {
        ...basePostData,
        ...overrides,
    };
    
    // ForumPost.from will handle generation of id, createdAt, updatedAt if not present in postData
    return ForumPost.from(postData);
}